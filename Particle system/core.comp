#version 430 core

layout (local_size_x = 128) in;

layout (rgba32f, binding = 0) uniform imageBuffer position_buffer;

//uniform float dt;
uniform int currentVectorField;

void main(void)
{
    vec4 pos = imageLoad(position_buffer, int(gl_GlobalInvocationID.x));
	mat4 translation;
	float divider = 100;

	//Lorencov atraktor
	if(currentVectorField == 1) {
	divider = 100;
	float sigma = 10.0;
	float ro = 28.0;
	float beta = 8.0/3.0;
	translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, (sigma * (pos.y - pos.x))/divider , (ro*pos.x - pos.y - pos.x * pos.z)/divider , (pos.x*pos.y - beta*pos.z)/divider , 1.0);
	
	} else if (currentVectorField == 2) {

	divider = 50.0f;
	float a = 2.2f;
	float b = 0.001f;

	float x = sin(pos.x);
	float y = cos(pos.y);
	float z = tan(pos.z);
	
	//translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, 0.1, sin(pos.x) + cos(pos.y), sin(pos.z), 1.0);
	translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0,  x/divider , y/divider , z/divider, 1.0);
	
	}else if(currentVectorField == 3) {

	divider = 50;
	translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0,  (-pos.y/divider * pos.z/divider), (2*pos.x/divider * pos.z/divider), 0.0, 1.0);
	
	//Roslerov atraktor
	}else if(currentVectorField == 4) {

	float a = 0.1f;
	float b = 0.1f;
	float c = 14.0f;
	divider = 50;
	translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, (-pos.y - pos.z)/divider , (pos.x + a * pos.y)/divider , (b + pos.z * (pos.x - c))/divider , 1.0);

	//No vector field
	}else if(currentVectorField == 5){
	
	translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, 0.0 , 0.0 , 0.0 , 1.0);
	
	}else if(currentVectorField == 6){
	
//WRITE_INDICATOR_START
float x = sin(pos.y)-0.1*pos.x;
float y = sin(pos.z)-0.1*pos.y;
float z = sin(pos.x)-0.1*pos.z;
//WRITE_INDICATOR_END

		translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, x , y , z , 1.0);
	
	}

	pos.xyz = (translation * vec4(pos.xyz, 1.0)).xyz;

    imageStore(position_buffer, int(gl_GlobalInvocationID.x), pos);
}

#version 430 core

//layout (std140, binding = 0) uniform attractor_block
//{
  //  vec4 attractor[64]; // xyz = position, w = mass
//};

mat4 translation; 

layout (local_size_x = 128) in;

//layout (rgba32f, binding = 0) uniform imageBuffer velocity_buffer;
layout (rgba32f, binding = 1) uniform imageBuffer position_buffer;

uniform float dt = 1.0;



void main(void)
{
   // vec4 vel = imageLoad(velocity_buffer, int(gl_GlobalInvocationID.x));
    vec4 pos = imageLoad(position_buffer, int(gl_GlobalInvocationID.x));
	float PI = 3.141592653589793238;
	float gravityConstant = 6.67428*pow(10,-11);
	float divider = 150;
	float a = 1; //parameter of vector field
	vec4 centerOfMass = vec4(-30.0, 0.0, 0.0, 1.0);

	float sigma = 5.0;
	float ro = 20.0;
	float beta = 8.0/3.0;

	//translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0,  (-pos.y/divider * pos.z/divider), (2*pos.x/divider * pos.z/divider), 0.0, 1.0);
	//translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, 0.1, sin(pos.x) + cos(pos.y), sin(pos.z), 1.0);
	//translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, a * pos.y + (1-a) * pos.x, -a*pos.x + (1-a)*pos.y, a*sin(PI * pos.z), 1.0);

	//Lorencov atraktor
	translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, (sigma * (pos.y - pos.x))/divider , (ro*pos.x - pos.y - pos.x * pos.z)/divider , (pos.x*pos.y - beta*pos.z)/divider , 1.0);

	float d = length(pos.xyz - centerOfMass.xyz);

	vec3 pomeraj = (-gravityConstant * (1.0 * 1000000000000.0) / (d*d)) * normalize(pos.xyz - centerOfMass.xyz);
		
	//translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, pomeraj.x, pomeraj.y, pomeraj.z, 1.0);

	pos = translation * pos;

    imageStore(position_buffer, int(gl_GlobalInvocationID.x), pos);
  //  imageStore(velocity_buffer, int(gl_GlobalInvocationID.x), vel);

}
#version 430 core

layout( local_size_x = 36) in;

layout (std430, binding = 0) buffer sphereBuffer{
	float vertices[];
};

layout(std430, binding = 1) buffer sphereCenters{
	float centers[];
};

uniform int verticesPerSphere;

void main(){

	 mat4 translation;
	 float divider;

	 int centerIndex = 0;
 
		int i=0;

		while(i < vertices.length()) {
		
			float cx = centers[centerIndex];
			float cy = centers[centerIndex+1];
			float cz = centers[centerIndex+2];

			divider = 60.0f;
			float sigma = 10.0;
			float ro = 28.0;
			float beta = 8.0/3.0;
			translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, (sigma * (cy - cx))/divider,
	        (ro*cx - cy - cx * cz)/divider , (cx*cy - beta*cz)/divider , 1.0);

			for(int j = i; j < (i + verticesPerSphere); j+=6){

				vec4 vertex = vec4(vertices[j], vertices[j+1], vertices[j+2], 1.0f);
				vertex = translation * vertex;

				float newX = vertex.x;
				float newY = vertex.y;
				float newZ = vertex.z;

				vertices[j] = newX;
				vertices[j+1] = newY;
				vertices[j+2] = newZ;

			}

			vec4 center = vec4(cx, cy, cz, 1.0f);
			center = translation * center;

			float newX = center.x;
			float newY = center.y;
			float newZ = center.z;

			centers[centerIndex] = newX;
			centers[centerIndex+1] = newY;
			centers[centerIndex+2] = newZ;

			centerIndex += 3;
			i += verticesPerSphere;

			}

}
#version 430 core

layout( local_size_x = 36) in;

layout (std430, binding = 0) buffer sphereBuffer{
	float vertices[];
};

layout(std430, binding = 1) buffer sphereCenters{
	float centers[];
};

layout(std430, binding = 2) buffer linesBuffer{
	float lines[];
};

uniform int verticesPerSphere;
uniform int lineIndex;
uniform int currentVF;

int lineIndexTemp = lineIndex;

void main(){

	 mat4 translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, 0.0 , 0.0 , 0.0 , 1.0);

	 float divider;

	 int centerIndex = 0;
	 int i=0;

		while(i < vertices.length()) {
		
			float cx = centers[centerIndex];
			float cy = centers[centerIndex+1];
			float cz = centers[centerIndex+2];

			//Lorencov atraktor
			if(currentVF == 1){
			
				divider = 300.0f;
				float sigma = 10.0;
				float ro = 28.0;
				float beta = 8.0/3.0;
			
				translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, (sigma * (cy - cx))/divider,
				(ro*cx - cy - cx * cz)/divider , (cx*cy - beta*cz)/divider , 1.0);
			
			}else if(currentVF == 2){
			
				divider = 50.0f;

				float x = sin(cx);
				float y = cos(cy);
				float z = tan(cz);

				translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, x/divider, y/divider, z/divider, 1.0);

			}else if(currentVF == 3){
			
				divider = 50;
				translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, (-cy/divider * cz/divider), (2*cx/divider * cz/divider), 0.0, 1.0);
	
			}else if(currentVF == 4){
			
				//Roslerov atraktor
				float a = 0.1f;
				float b = 0.1f;
				float c = 14.0f;
				divider = 50;
				translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, (-cy - cz)/divider , (cx + a * cy)/divider , (b + cz * (cx - c))/divider , 1.0);
			
			//No vector field
			}else if(currentVF == 5){

				translation = mat4(1.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0, 0.0 , 0.0 , 0.0 , 1.0);

			}

			for(int j = i; j < (i + verticesPerSphere); j+=9){

				vec4 vertex = vec4(vertices[j], vertices[j+1], vertices[j+2], 1.0f);
				vertex = translation * vertex;

				float newX = vertex.x;
				float newY = vertex.y;
				float newZ = vertex.z;

				vertices[j] = newX;
				vertices[j+1] = newY;
				vertices[j+2] = newZ;

			}

			vec4 center = vec4(cx, cy, cz, 1.0f);
			center = translation * center;

			lines[lineIndexTemp++] = cx;
			lines[lineIndexTemp++] = cy;
			lines[lineIndexTemp++] = cz;

			float newX = center.x;
			float newY = center.y;
			float newZ = center.z;

			lines[lineIndexTemp++] = newX;
			lines[lineIndexTemp++] = newY;
			lines[lineIndexTemp++] = newZ;

			centers[centerIndex] = newX;
			centers[centerIndex+1] = newY;
			centers[centerIndex+2] = newZ;

			centerIndex += 3;
			i += verticesPerSphere;

			}
}
